---
### [Change System Name] ishizawa-aws-test
### ImportValue: vpc, iam-role
AWSTemplateFormatVersion: "2010-09-09"
Description: Create RDS DB Cluster etc.

Mappings:
  EnvironmentMap:
    prod:
      DBInstanceClass: db.t3.small
      CreateDBInstanceC: false
      CreateDBInstanceD: false
      EnhancedMonitoring: true
      BackupRetentionPeriod: 3
    stg:
      DBInstanceClass: db.t3.small
      CreateDBInstanceC: false
      CreateDBInstanceD: false
      EnhancedMonitoring: false
      BackupRetentionPeriod: 1
    dev:
      DBInstanceClass: db.t3.small
      CreateDBInstanceC: false
      CreateDBInstanceD: false
      EnhancedMonitoring: false
      BackupRetentionPeriod: 1
  SystemNameMap:
    ishizawa-aws-test:
      Engine: aurora-mysql
      ParameterGroupFamily: aurora-mysql5.7
      EngineVersion: 5.7.mysql_aurora.2.10.2
      PreferredBackupWindow: 16:15-16:45
      PreferredMaintenanceWindowCluster: tue:16:45-tue:17:15
      PreferredMaintenanceWindowInstanceA: tue:17:15-tue:17:45
      PreferredMaintenanceWindowInstanceC: tue:17:45-tue:18:15
      PreferredMaintenanceWindowInstanceD: tue:18:15-tue:18:45

Parameters:
  SystemName:
    Description: System Name
    Type: String
    Default: ishizawa-aws-test
  Environment:
    Description: Environment
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - stg
      - dev

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Environment Configuration"
        Parameters:
          - SystemName
          - Environment

Conditions:
  ShouldCreateDBInstanceC: !Equals [ !FindInMap [ EnvironmentMap, !Ref Environment, CreateDBInstanceC ], true ]
  ShouldCreateDBInstanceD: !Equals [ !FindInMap [ EnvironmentMap, !Ref Environment, CreateDBInstanceD ], true ]
  EnabledEnhancedMonitoring: !Equals [ !FindInMap [ EnvironmentMap, !Ref Environment, EnhancedMonitoring ], true ]

Resources:
  ## Secrets Manager: Secret
  SecretForRDS:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub Secret for RDS (Master user (root) of ${AWS::StackName})
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: password
        ## 記号を除く
        ExcludePunctuation: true
        PasswordLength: 32

  SecretForRDSAwsmaster:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub Secret for RDS (User ${SystemName} of ${AWS::StackName})
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"database": "${SystemName}", "username": "${SystemName}"}'
        GenerateStringKey: password
        ExcludePunctuation: true
        PasswordLength: 32

  ## EC2(VPC): Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${SystemName}-${Environment}-rds-sg
      GroupDescription: !Sub ${SystemName}-${Environment}-rds-sg
      VpcId:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-rds-sg

  ## RDS: DB Cluster Parameter Group
  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Sub ${SystemName}-${Environment}-rds-cluster-pg
      Family: !FindInMap [ SystemNameMap, !Ref SystemName, ParameterGroupFamily ]
      Parameters:
        ## Default
        log_output: FILE

  ## RDS: DB Parameter Group
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub ${SystemName}-${Environment}-rds-pg
      Family: !FindInMap [ SystemNameMap, !Ref SystemName, ParameterGroupFamily ]

  ## RDS: DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${SystemName}-${Environment}-rds-subgrp
      SubnetIds:
        - Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-SubnetPrivateA
        - Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-SubnetPrivateC
        - Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-SubnetPrivateD

  ## RDS: DB Cluster
  ## endpoint->clusterに接続する場所
  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      ## どのクラスターの子分か
      DBClusterIdentifier: !Sub ${SystemName}-${Environment}-rds
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      ##??
      DBSubnetGroupName: !Ref DBSubnetGroup
      ##?? RDSで使われるAZはどれですかを表す
      AvailabilityZones:
        - !Sub ${AWS::Region}a
        - !Sub ${AWS::Region}c
        - !Sub ${AWS::Region}d
      ## インスタンスのVPCのところで確認できる？
      VpcSecurityGroupIds:
        - !Ref EC2SecurityGroup
      Engine: !FindInMap [ SystemNameMap, !Ref SystemName, Engine ]
      ## ?? provisioned資源が提供されました
      EngineMode: provisioned
      EngineVersion: !FindInMap [ SystemNameMap, !Ref SystemName, EngineVersion ]
      MasterUsername: !Sub "{{resolve:secretsmanager:${SecretForRDS}:SecretString:username}}"
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${SecretForRDS}:SecretString:password}}"
      PreferredBackupWindow: !FindInMap [ SystemNameMap, !Ref SystemName, PreferredBackupWindow ]
      PreferredMaintenanceWindow: !FindInMap [ SystemNameMap, !Ref SystemName, PreferredMaintenanceWindowCluster ]
      ## ?? Backup Automated backups Enabled (3 Days)の部分?
      BackupRetentionPeriod: !FindInMap [ EnvironmentMap, !Ref Environment, BackupRetentionPeriod ]
      StorageEncrypted: true
      EnableCloudwatchLogsExports:
        - audit
        - error
        - general
        - slowquery
      DeletionProtection: true

  ## RDS: DB Instance @ SubnetPrivateA
  DBInstanceA:
    Type: AWS::RDS::DBInstance
    Properties:
      ## Failover priorityの部分にくる
      PromotionTier: 1
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: !FindInMap [ EnvironmentMap, !Ref Environment, DBInstanceClass ]
      DBParameterGroupName: !Ref DBParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      ## ここで決めなければAWSが自動で作成する
      AvailabilityZone: !Sub ${AWS::Region}a
      Engine: !FindInMap [ SystemNameMap, !Ref SystemName, Engine ]
      EngineVersion: !FindInMap [ SystemNameMap, !Ref SystemName, EngineVersion ]
      PreferredMaintenanceWindow: !FindInMap [ SystemNameMap, !Ref SystemName, PreferredMaintenanceWindowInstanceA ]
      PubliclyAccessible: false
      ## ??
      CopyTagsToSnapshot: true
      ## ?? EnabledEnhancedMonitoringがtrueだったらroleを割り当てる。falseだったら何も設定しない
      MonitoringRoleArn: !If [ EnabledEnhancedMonitoring, !ImportValue iam-role-AmazonRDSEnhancedMonitoringRoleArn, !Ref AWS::NoValue ]
      ## ?? EnabledEnhancedMonitoringがtrueだったら60を割り当てる。falseだったら0
      ## モニタリングされる期間
      MonitoringInterval: !If [ EnabledEnhancedMonitoring, 60, 0 ]
      StorageEncrypted: true
      ## ??
      ## DBの負荷をSQLクエリごとに、リアルタイムで確認できる機能です。クエリの詳細、接続元ホスト、接続ユーザーなどを調べられます。
      EnablePerformanceInsights: false ## Not suported on Aurora(MySQL) db.t3 instance classes.
      AutoMinorVersionUpgrade: true
      ## ??
      ## clusterを消す時にバックアップも一緒に消しますか？
      ## Amazon RDS Performance Insights が一般利用可能に | Amazon Web Services
      DeleteAutomatedBackups: false

  ## RDS: DB Instance @ SubnetPrivateC
  DBInstanceC:
    Condition: ShouldCreateDBInstanceC
    Type: AWS::RDS::DBInstance
    Properties:
      PromotionTier: 2
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: !FindInMap [ EnvironmentMap, !Ref Environment, DBInstanceClass ]
      DBParameterGroupName: !Ref DBParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      AvailabilityZone: !Sub ${AWS::Region}c
      Engine: !FindInMap [ SystemNameMap, !Ref SystemName, Engine ]
      EngineVersion: !FindInMap [ SystemNameMap, !Ref SystemName, EngineVersion ]
      PreferredMaintenanceWindow: !FindInMap [ SystemNameMap, !Ref SystemName, PreferredMaintenanceWindowInstanceC ]
      PubliclyAccessible: false
      CopyTagsToSnapshot: true
      MonitoringRoleArn: !If [ EnabledEnhancedMonitoring, !ImportValue iam-role-AmazonRDSEnhancedMonitoringRoleArn, !Ref AWS::NoValue ]
      MonitoringInterval: !If [ EnabledEnhancedMonitoring, 60, 0 ]
      StorageEncrypted: true
      EnablePerformanceInsights: false ## Not suported on Aurora MySQL db.t3 instance classes.
      AutoMinorVersionUpgrade: true
      DeleteAutomatedBackups: false

  ## RDS: DB Instance @ SubnetPrivateD
  DBInstanceD:
    Condition: ShouldCreateDBInstanceD
    Type: AWS::RDS::DBInstance
    Properties:
      PromotionTier: 3
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: !FindInMap [ EnvironmentMap, !Ref Environment, DBInstanceClass ]
      DBParameterGroupName: !Ref DBParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      AvailabilityZone: !Sub ${AWS::Region}d
      Engine: !FindInMap [ SystemNameMap, !Ref SystemName, Engine ]
      EngineVersion: !FindInMap [ SystemNameMap, !Ref SystemName, EngineVersion ]
      PreferredMaintenanceWindow: !FindInMap [ SystemNameMap, !Ref SystemName, PreferredMaintenanceWindowInstanceD ]
      PubliclyAccessible: false
      CopyTagsToSnapshot: true
      MonitoringRoleArn: !If [ EnabledEnhancedMonitoring, !ImportValue iam-role-AmazonRDSEnhancedMonitoringRoleArn, !Ref AWS::NoValue ]
      MonitoringInterval: !If [ EnabledEnhancedMonitoring, 60, 0 ]
      StorageEncrypted: true
      ## 重要なサイトだとパフォーマンスインサイト見ないときつい。->重要なサービスはt系やめましょう
      EnablePerformanceInsights: false ## Not suported on Aurora(MySQL) db.t3 instance classes.
      AutoMinorVersionUpgrade: true
      DeleteAutomatedBackups: false

  ## Secrets Manager: Secret Target Attachment
  ## DBclusterが作成された後にsecret managerに紐付けするための設定。cloudformationのみの設定
  SecretTargetAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref SecretForRDS
      TargetId: !Ref DBCluster
      TargetType: AWS::RDS::DBCluster

  ## ⑧のAMIで利用するd
  SecretTargetAttachmentAwsmaster:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref SecretForRDSAwsmaster
      TargetId: !Ref DBCluster
      TargetType: AWS::RDS::DBCluster

Outputs:
  ## Secrets Manager: Secret
  SecretForRDS:
    Value: !Ref SecretForRDS
    Export:
      Name: !Sub ${AWS::StackName}-SecretForRDS

  SecretForRDSAwsmaster:
    Value: !Ref SecretForRDSAwsmaster
    Export:
      Name: !Sub ${AWS::StackName}-SecretForRDSAwsmaster

  ## EC2(VPC): Security Group
  EC2SecurityGroup:
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-EC2SecurityGroup

  EC2SecurityGroupVpcId:
    Value: !GetAtt EC2SecurityGroup.VpcId
    Export:
      Name: !Sub ${AWS::StackName}-EC2SecurityGroupVpcId

  ## RDS: DB Cluster Parameter Group
  DBClusterParameterGroup:
    Value: !Ref DBClusterParameterGroup
    Export:
      Name: !Sub ${AWS::StackName}-DBClusterParameterGroup

  ## RDS: DB Parameter Group
  DBParameterGroup:
    Value: !Ref DBParameterGroup
    Export:
      Name: !Sub ${AWS::StackName}-DBParameterGroup

  ## RDS: DB Subnet Group
  DBSubnetGroup:
    Value: !Ref DBSubnetGroup
    Export:
      Name: !Sub ${AWS::StackName}-DBSubnetGroup

  ## RDS: DB Cluster
  DBCluster:
    Value: !Ref DBCluster
    Export:
      Name: !Sub ${AWS::StackName}-DBCluster

  DBClusterEndpointAddress:
    Value: !GetAtt DBCluster.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DBClusterEndpointAddress

  DBClusterEndpointPort:
    Value: !GetAtt DBCluster.Endpoint.Port
    Export:
      Name: !Sub ${AWS::StackName}-DBClusterEndpointPort

  DBClusterReadEndpointAddress:
    Value: !GetAtt DBCluster.ReadEndpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DBClusterReadEndpointAddress

  ## RDS: DB Instance @ SubnetPrivateA
  DBInstanceA:
    Value: !Ref DBInstanceA
    Export:
      Name: !Sub ${AWS::StackName}-DBInstanceA

  DBInstanceAEndpointAddress:
    Value: !GetAtt DBInstanceA.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DBInstanceAEndpointAddress

  DBInstanceAEndpointPort:
    Value: !GetAtt DBInstanceA.Endpoint.Port
    Export:
      Name: !Sub ${AWS::StackName}-DBInstanceAEndpointPort

  ## RDS: DB Instance @ SubnetPrivateC
  DBInstanceC:
    Condition: ShouldCreateDBInstanceC
    Value: !Ref DBInstanceC
    Export:
      Name: !Sub ${AWS::StackName}-DBInstanceC

  DBInstanceCEndpointAddress:
    Condition: ShouldCreateDBInstanceC
    Value: !GetAtt DBInstanceC.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DBInstanceCEndpointAddress

  DBInstanceCEndpointPort:
    Condition: ShouldCreateDBInstanceC
    Value: !GetAtt DBInstanceC.Endpoint.Port
    Export:
      Name: !Sub ${AWS::StackName}-DBInstanceCEndpointPort

  ## RDS: DB Instance @ SubnetPrivateD
  DBInstanceD:
    Condition: ShouldCreateDBInstanceD
    Value: !Ref DBInstanceD
    Export:
      Name: !Sub ${AWS::StackName}-DBInstanceD

  DBInstanceDEndpointAddress:
    Condition: ShouldCreateDBInstanceD
    Value: !GetAtt DBInstanceD.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DBInstanceDEndpointAddress

  DBInstanceDEndpointPort:
    Condition: ShouldCreateDBInstanceD
    Value: !GetAtt DBInstanceD.Endpoint.Port
    Export:
      Name: !Sub ${AWS::StackName}-DBInstanceDEndpointPort

  ## Secrets Manager: Secret Target Attachment
  SecretTargetAttachment:
    Value: !Ref SecretTargetAttachment
    Export:
      Name: !Sub ${AWS::StackName}-SecretTargetAttachment

  SecretTargetAttachmentAwsmaster:
    Value: !Ref SecretTargetAttachmentAwsmaster
    Export:
      Name: !Sub ${AWS::StackName}-SecretTargetAttachmentAwsmaster
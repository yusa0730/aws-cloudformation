## upstreamコンテキストは、バックエンドのアプリケーションサーバーを示すもの
# サーバーのIPアドレスとポート番号を並べたserverディレクティブを並べて記述し、まとめたものに名前をつけます。
upstream backend {
  server \${NGINX_BACKEND}:3000;
}

# serverコンテキストは、通常のWebサーバーと似た設定で、外部からのアクセス方法を示す。
# リバースプロキシを指定する時は、proxy_passディレクティブで転送先のupstreamの名前を指定する。
server {
  listen 80;
  server_name localhost;

  # add_headerで通常のヘッダを付与する　236p
  # ブラウザにHTTPSによるアクセスを強制する
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

  ## nosniffを設定するとヘッダのContent-Typeを無視してブラウザの動作を抑制する
  # add_header X-Content-Type-Options nosniff always;

  ## SAMEORIGN で同一サイト内で使われる場合に限定する
  # add_header X-Frame-Options SAMEORIGIN always;

  ## クロスサイトスクリプティングに対抗する機能を設定
  # add_header X-XSS-Protection "1; mode=block" always;

  ## Module ngx_http_realip_module
  ## http://nginx.org/en/docs/http/ngx_http_realip_module.html
  set_real_ip_from 10.0.0.0/8;

  ## クライアントIPアドレスとして扱うHTTPヘッダを指定します
  real_ip_header X-Forwarded-For;
  set \$real_ip \$realip_remote_addr;
  set \$forwarded_for -;
  # 正規表現
  # . (ドット)は任意の一文字にマッチします。
  # メタ文字自身
  #  \\  \|  \(  \)  \{  \}  \^  \$  \*  \+  \?  \.
  # 文字の集合を [...] で表します。集合の中のどれか一文字にマッチ します。一方、その逆の集合の中のどれにもマッチしない場合は補集合 [^...] で表します。

  # [^, ]は ,と が含まれない
  if (\$real_ip_temp ~ "([^, ]+) *, *[^, ]+ *\$") {
    set \$real_ip \$1;
    set \$forwarded_for '\$http_x_forwarded_for, \$realip_remote_addr';
  }

  # client_max_body_sizeはNginxのリクエストボティサイズの設定項目で、デフォルト値は「1m（1MB）
  # https://kdnakt.hatenablog.com/entry/2021/04/25/nginx-and-curl
  client_max_body_size 30M;

  # 「~」 大文字と小文字の区別をする
  # 「~*」大文字小文字を区別しない
  # 「^」 先頭からマッチ
  location ~* ^/ {
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    # add_header X-Content-Type-Options nosniff always;
    # add_header X-Frame-Options SAMEORIGIN always;
    # add_header X-XSS-Protection "1; mode=block" always;

    ## nginx - no resolver defined to resolve s3-eu-west-1.amazonaws.com - Stack Overflow
    ## https://stackoverflow.com/questions/49677656/
    # resolver 169.254.169.253 valid=30s;

    # $1にcookie_pathを書き換えてる。
    proxy_cookie_path ~^/(.*)\$ "/\$1; Secure";

    # ヘッダの付与 p156
    # nginxでバックエンドにアクセスするときのリクエストヘッダを付与するには、proxy_set_headerディレクティブを使います。
    # Host はサーバーのホスト名を示す。proxy_passで指定したupstream名に書き換えられる
    proxy_set_header Host \$host;

    # リバースプロキシを設定する時は転送先のupstreamの名前を指定
    proxy_pass http://backend;
  }
}
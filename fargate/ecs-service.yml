---
### [Change System Name] ishizawa-aws-test
### ImportValue: vpc, elb, rds, cloudfront, iam-role, ecr, route53, ecs-cluster
AWSTemplateFormatVersion: "2010-09-09"
Description: Create EC2 Security Group, IAM Policy, IAM Role, SSM Parameter, ELB TargetGroup, ELB ListenerRule, ECS TaskDefinition and ECS Service (Fargate) etc.

Mappings:
  EnvironmentMap:
    prod:
      ServiceDesiredCount: 2
    stg:
      ServiceDesiredCount: 2
    dev:
      ServiceDesiredCount: 1

Parameters:
  SystemName:
    Description: System Name
    Type: String
    Default: ishizawa-aws-test ### [Change System Name]
  Environment:
    Description: Environment
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - stg
      - dev
  ResourceName:
    Description: Resource Name
    Type: String
    Default: fg
  ## 前回に比べて優先度を上げている
  ELBListenerRulePriority:
    Description: ELB Listner Rule Priority
    Type: Number
    Default: 111
    MinValue: 1
    MaxValue: 50000
  UseSubnetProtected:
    Description: Use Protected Subnet
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Environment Configuration
        Parameters:
          - SystemName
          - Environment
          - ResourceName
          - ELBListenerRulePriority
          - UseSubnetProtected

Conditions:
  # isProd: !Equals [ !Ref Environment, prod ]
  ShouldUseSubnetProtected: !Equals [ !Ref UseSubnetProtected, true ]

Resources:
  ## EC2(VPC): Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${SystemName}-${Environment}-${ResourceName}-ecs-task-sg
      GroupDescription: !Sub ${SystemName}-${Environment}-${ResourceName}-ecs-task-sg
      VpcId:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-${ResourceName}-ecs-task-sg

  ## EC2(VPC): Security Group Inbound Rule From ELB (HTTP)
  EC2SecurityGroupIngressHttpFromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-elb-EC2SecurityGroup
      Description: !Sub ${SystemName}-${Environment}-alb-sg

  ## EC2(VPC): Security Group Inbound Rule To RDS (MySQL)
  ## そのリソースが何のために必要なのか？RDSのスタックでも記述できるけど、RDSのファイルも変更しないといけないしスタックを削除する時にスムーズに消すことができないのでここに記載している
  EC2SecurityGroupIngressMySQLToRDS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-rds-EC2SecurityGroup
      IpProtocol: tcp
      FromPort:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-rds-DBClusterEndpointPort
      ToPort:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-rds-DBClusterEndpointPort
      SourceSecurityGroupId: !Ref EC2SecurityGroup
      Description: !Sub ${SystemName}-${Environment}-${ResourceName}-ecs-task-sg

  ## IAM: Role
  ## 今回はECS Task自体に付けるIAM Role。前回はEC2インスタンスに付けていた
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${SystemName}-${Environment}-${ResourceName}-ecs-task-role
      ## ecsタスクにお面を被せることを許可する
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ## 他のリソースでも使い回したい汎用的なポリシー
      ManagedPolicyArns:
        ## To use ECS Exec
        - !ImportValue iam-role-AmazonECSExecuteCommandPolicy
      ## インラインポリシー。このロールでしか利用しないポリシー
      Policies:
        - PolicyName: AmazonS3StaticContentsManipulateObjectPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource:
                  Fn::ImportValue: !Sub ${SystemName}-${Environment}-cloudfront-S3BucketStaticContentsArn
              - Effect: Allow
                Action: "s3:*Object"
                Resource: !Sub
                    - ${S3BucketArn}/*
                    - S3BucketArn:
                        Fn::ImportValue: !Sub ${SystemName}-${Environment}-cloudfront-S3BucketStaticContentsArn

  ## ELB: Target Group
  ## 今までは全てinstanceが振り分け対象（ターゲット）だったが、今回はipが振り分け対象となる
  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${SystemName}-${Environment}-${ResourceName}-tg
      TargetType: ip
      Protocol: HTTP
      Port: 80
      VpcId:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-VPC
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /users/
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: "200,301"
      # TargetGroupAttributes:
      #   - Key: stickiness.enabled
      #     Value: true
      #   - Key: stickiness.lb_cookie.duration_seconds
      #     Value: 3600
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-${ResourceName}-tg

  ## ELB: Listener Rule
  ELBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-elb-ListenerHttps
      Priority: !Ref ELBListenerRulePriority
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: x-via-cloudfront
            Values:
              - !Sub
                  - "{{resolve:secretsmanager:${SecretForCloudFront}:SecretString:x-via-cloudfront}}"
                  - SecretForCloudFront:
                      Fn::ImportValue: !Sub ${SystemName}-${Environment}-cloudfront-SecretForCloudFront
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /*
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ELBTargetGroup

  ## Logs: LogGroup
  LogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${SystemName}-${Environment}-${ResourceName}-ecs-task

  ## SSM: Parameter
  SSMParameterAppRailsEnv:
    Type: AWS::SSM::Parameter
    Properties:
      ## For some reason, I couldn't put awsmaster at the beginning. It seems to be reserved.
      Name: !Sub /${Environment}/${SystemName}/${ResourceName}/ecs/environment/app/rails-env
      Type: String
      Value: development

  ## ECS: Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${SystemName}-${Environment}-${ResourceName}-ecs-task
      ## 新しい
      RequiresCompatibilities:
        - FARGATE
      ## タスク自体(コンテナ)に対するIAMRoleの付与。ECSタスクからLambdaを呼び出したいとき->Lambdaの実行権限をここに設定。
      TaskRoleArn: !GetAtt IAMRole.Arn
      ## 新しい
      ## awsvpcネットワークモードでは、Amazon ECS は各タスクの Elastic Network Interface（ENI）を作成および管理し、各タスクが VPC 内で独自のプライベート IP アドレスを受け取ります
      NetworkMode: awsvpc
      ExecutionRoleArn: !ImportValue iam-role-AmazonECSTaskExecutionRoleArn
      ## 新しい
      ## リソースの確保をしている
      Memory: 512
      ## 新しい
      ## リソースの確保をしている
      Cpu: 256
      ContainerDefinitions:
        - Name: app
          Image: !Sub
              - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest
              - ECRRepository:
                  Fn::ImportValue: !Sub ${SystemName}-${Environment}-ecr-ECRRepositoryApp
          Cpu: 0
          MemoryReservation: 80
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://127.0.0.1:3000/users/ || exit 1"
            StartPeriod: 180
          Secrets:
            - Name: MYSQL_HOST
              ValueFrom: !Sub
                  - "${SecretForRDSAwsmaster}:host::"
                  - SecretForRDSAwsmaster:
                      Fn::ImportValue: !Sub ${SystemName}-${Environment}-rds-SecretForRDSAwsmaster
            - Name: MYSQL_DATABASE
              ValueFrom: !Sub
                  - "${SecretForRDSAwsmaster}:database::"
                  - SecretForRDSAwsmaster:
                      Fn::ImportValue: !Sub ${SystemName}-${Environment}-rds-SecretForRDSAwsmaster
            - Name: MYSQL_USER
              ValueFrom: !Sub
                  - "${SecretForRDSAwsmaster}:username::"
                  - SecretForRDSAwsmaster:
                      Fn::ImportValue: !Sub ${SystemName}-${Environment}-rds-SecretForRDSAwsmaster
            - Name: MYSQL_PASSWORD
              ValueFrom: !Sub
                  - "${SecretForRDSAwsmaster}:password::"
                  - SecretForRDSAwsmaster:
                      Fn::ImportValue: !Sub ${SystemName}-${Environment}-rds-SecretForRDSAwsmaster
            - Name: RAILS_ENV
              ValueFrom: !Ref SSMParameterAppRailsEnv
          ## ??
          Environment:
            - Name: RAILS_CONFIG_HOSTS
              Value: !Sub
                  - ".${DomainName}" ## Include subdomains.
                  - DomainName:
                      Fn::ImportValue: !Sub ${SystemName}-${Environment}-route53-HostedZoneDomainName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          LinuxParameters:
            InitProcessEnabled: true
        - Name: web
          Image: !Sub
              - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest
              - ECRRepository:
                  Fn::ImportValue: !Sub ${SystemName}-${Environment}-ecr-ECRRepositoryWeb
          Cpu: 0
          MemoryReservation: 16
          ## 前回はECSタスクがbridgeモードのためランダムポートだったが、今回はawsvpcモードのためポート番号を固定できる
          ## HostPort: 0の記述が消えている 動的なポート番号を割り当てている部分の記載が消えている
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          ## $$NGINX_BACKENDの値を/etc/nginx/conf.d/default.conf.templateに置換して、/etc/nginx/conf.d/default.confを作成する
          Command:
            - /bin/bash
            - -c
            - "envsubst '$$NGINX_BACKEND' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
          Essential: true
          ## 新しい
          ## Nginx(web)コンテナのポートマッピングで動的ホストポートを削除、NGINX_BACKEND環境変数の値をappから127.0.0.1に変更、リンクappを削除
          ## 127.0.0.1に変更、リンクappを削除はFargateの仕様のため
          Environment:
            - Name: NGINX_BACKEND
              Value: 127.0.0.1
          DependsOn:
            - ContainerName: app
              Condition: HEALTHY
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogsLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          LinuxParameters:
            InitProcessEnabled: true

  ## ECS: Service
  ## 修正部分・・タスク配置戦略の設定がなくなった。
  Service:
    Type: AWS::ECS::Service
    DependsOn: ELBListenerRule
    Properties:
      ServiceName: !Sub ${SystemName}-${Environment}-${ResourceName}-ecs-service
      ## 新しい
      ## キャパシティプロバイダー戦略を使って安いFARGATE_SPOTを優先的に起動する。weightが1なので
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 0
        - CapacityProvider: FARGATE_SPOT
          Base: 0
          Weight: 1
      TaskDefinition: !Ref TaskDefinition
      ## 新しい
      ## サービス内のタスクが実行されているプラットフォームのバージョンです。プラットフォーム・バージョンは、Fargate起動タイプを使用するタスクにのみ指定されます。
      PlatformVersion: LATEST
      Cluster:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-${ResourceName}-ecs-cluster-Cluster
      SchedulingStrategy: REPLICA
      DesiredCount: !FindInMap [ EnvironmentMap, !Ref Environment, ServiceDesiredCount ]
      ## どのくらいの数のタスクを起動させるかのオプション設定
      ## minimumHealthyPercentはデプロイ時に RUNNING 状態に留まる必要があるサービスのタスクの下限数を表す。例えば、サービスで desiredCount が 4 タスク、minimumHealthyPercent が 50% とすると、サービススケジューラは 2 つの新しいタスクを開始する前に、2 つの既存のタスクを停止してクラスターのキャパシティーを解放できます。
      ## MaximumPercentはデプロイ時に RUNNING または PENDING 状態で許可されるサービスのタスクの上限数を表す。例えば、サービスで REPLICA サービススケジューラを使用して、desiredCount が 4 タスク、maximumPercent の値が 200% とすると、スケジューラは 4 つの古いタスクを停止する前に、4 つの新しいタスクを開始できます。
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      ## clusterかserviceのタグをECSタスクにコピー
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      ## 新しい
      ## ECSタスクやECSサービスに対するネットワークを定義する
      NetworkConfiguration:
        ## ECSタスクにひもづくvpcサブネットとセキュリティグループ定義
        AwsvpcConfiguration:
          Subnets:
            Fn::If:
              - ShouldUseSubnetProtected
              - - Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-SubnetProtectedA
                - Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-SubnetProtectedC
                - Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-SubnetProtectedD
              - - Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-SubnetPublicA
                - Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-SubnetPublicC
                - Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-SubnetPublicD
          SecurityGroups:
            - !Ref EC2SecurityGroup
          ## 今回はtrueなのでDISABLED
          AssignPublicIp: !If [ ShouldUseSubnetProtected, DISABLED, ENABLED ]
      ## Amazon ECS サービススケジューラが、タスクが RUNNING 状態になった後で異常な Elastic Load Balancing ターゲットのヘルスチェック、コンテナのヘルスチェック、Route 53 のヘルスチェックを無視する期間 (秒単位)
      HealthCheckGracePeriodSeconds: 300
      ## ECSタスクのwebコンテナを80番ポートでALBのターゲットグループのターゲットに登録している
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn: !Ref ELBTargetGroup

  ## Comment out because it cannot be edited on the management console.
  # ## ApplicationAutoScaling: ScalableTarget
  # ApplicationAutoScalingScalableTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   Properties:
  #     ServiceNamespace: ecs
  #     ScalableDimension: ecs:service:DesiredCount
  #     ResourceId: !Sub
  #         - service/${ClusterName}/${Service.Name}
  #         - ClusterName:
  #             Fn::ImportValue:
  #               !Sub ${SystemName}-${Environment}-${ResourceName}-ecs-cluster-Cluster
  #     MinCapacity: !FindInMap [ EnvironmentMap, !Ref Environment, ServiceDesiredCount ]
  #     MaxCapacity: !FindInMap [ EnvironmentMap, !Ref Environment, ServiceDesiredCount ]
  #     RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService ## IAM role created automatically.
  #     ScheduledActions:
  #       Fn::If:
  #         - isProd
  #         - - ScheduledActionName: !Sub ${SystemName}-${Environment}-${ResourceName}-scheduled-action-scale-out
  #             ScalableTargetAction:
  #               MinCapacity: !FindInMap [ EnvironmentMap, !Ref Environment, ServiceDesiredCount ]
  #               MaxCapacity: !FindInMap [ EnvironmentMap, !Ref Environment, ServiceDesiredCount ]
  #             Schedule: cron(0 22 ? * SUN-THU) ## Monday-Friday 07:00(JST) @ Prod
  #           - ScheduledActionName: !Sub ${SystemName}-${Environment}-${ResourceName}-scheduled-action-scale-in
  #             ScalableTargetAction:
  #               MinCapacity: 1
  #               MaxCapacity: 1
  #             Schedule: cron(0 14 ? * MON-FRI) ## Monday-Friday 23:00(JST) @ Prod
  #         - - ScheduledActionName: !Sub ${SystemName}-${Environment}-${ResourceName}-scheduled-action-start
  #             ScalableTargetAction:
  #               MinCapacity: !FindInMap [ EnvironmentMap, !Ref Environment, ServiceDesiredCount ]
  #               MaxCapacity: !FindInMap [ EnvironmentMap, !Ref Environment, ServiceDesiredCount ]
  #             Schedule: cron(50 22 ? * SUN-THU) ## Monday-Friday 07:50(JST) @ Not Prod
  #           - ScheduledActionName: !Sub ${SystemName}-${Environment}-${ResourceName}-scheduled-action-stop
  #             ScalableTargetAction:
  #               MinCapacity: 0
  #               MaxCapacity: 0
  #             Schedule: cron(0 13 ? * MON-FRI) ## Monday-Friday 22:00(JST) @ Not Prod

Outputs:
  ## EC2(VPC): Security Group
  EC2SecurityGroup:
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-EC2SecurityGroup

  EC2SecurityGroupVpcId:
    Value: !GetAtt EC2SecurityGroup.VpcId
    Export:
      Name: !Sub ${AWS::StackName}-EC2SecurityGroupVpcId

  ## IAM: Role
  IAMRole:
    Value: !Ref IAMRole
    Export:
      Name: !Sub ${AWS::StackName}-IAMRole

  IAMRoleArn:
    Value: !GetAtt IAMRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-IAMRoleArn

  ## ELB: Target Group
  ELBTargetGroup:
    Value: !Ref ELBTargetGroup
    Export:
      Name: !Sub ${AWS::StackName}-ELBTargetGroup

  ELBTargetGroupLoadBalancerArns1:
    Value: !Select [ 0, !GetAtt ELBTargetGroup.LoadBalancerArns ]
    Export:
      Name: !Sub ${AWS::StackName}-ELBTargetGroupLoadBalancerArns1

  ELBTargetGroupFullName:
    Value: !GetAtt ELBTargetGroup.TargetGroupFullName
    Export:
      Name: !Sub ${AWS::StackName}-ELBTargetGroupFullName

  ELBTargetGroupName:
    Value: !GetAtt ELBTargetGroup.TargetGroupName
    Export:
      Name: !Sub ${AWS::StackName}-ELBTargetGroupName

  ## ELB: Listener Rule
  ELBListenerRule:
    Value: !Ref ELBListenerRule
    Export:
      Name: !Sub ${AWS::StackName}-ELBListenerRule

  ## Logs: LogGroup
  LogsLogGroup:
    Value: !Ref LogsLogGroup
    Export:
      Name: !Sub ${AWS::StackName}-LogsLogGroup

  LogsLogGroupArn:
    Value: !GetAtt LogsLogGroup.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LogsLogGroupArn

  ## SSM: Parameter
  SSMParameterAppRailsEnv:
    Value: !Ref SSMParameterAppRailsEnv
    Export:
      Name: !Sub ${AWS::StackName}-SSMParameterAppRailsEnv

  ## ECS: Task Definition
  TaskDefinition:
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub ${AWS::StackName}-TaskDefinition

  ## ECS: Service
  Service:
    Value: !Ref Service
    Export:
      Name: !Sub ${AWS::StackName}-Service

  ServiceName:
    Value: !GetAtt Service.Name
    Export:
      Name: !Sub ${AWS::StackName}-ServiceName

  ## Comment out because it cannot be edited on the management console.
  # ## ApplicationAutoScaling: ScalableTarget
  # ApplicationAutoScalingScalableTarget:
  #   Value:
  #     Ref: ApplicationAutoScalingScalableTarget
  #   Export:
  #     Name: !Sub ${AWS::StackName}-ApplicationAutoScalingScalableTarget